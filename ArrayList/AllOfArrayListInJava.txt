Certainly! Here's a comprehensive list of common operations you can perform with an ArrayList in Java:

Declaration and Initialization:

ArrayList<Integer> myList = new ArrayList<>(); // Empty ArrayList
ArrayList<Integer> myList = new ArrayList<>(Arrays.asList(1, 2, 3)); // Initialized with elements

Adding Elements:

myList.add(5); // Adds element to the end
myList.add(1, 10); // Inserts element at index 1
myList.addAll(Arrays.asList(20, 30)); // Adds a collection of elements

Accessing Elements:

int element = myList.get(0); // Retrieves element at index 0

myList.set(1, 15); // Replaces element at index 1 with 15

Removing Elements:

myList.remove(0); // Removes element at index 0
myList.remove(Integer.valueOf(5)); // Removes the first occurrence of 5
myList.clear(); // Removes all elements

Size and Capacity:

int size = myList.size(); // Returns the number of elements
boolean isEmpty = myList.isEmpty(); // Checks if the ArrayList is empty

Containment Check:

boolean contains = myList.contains(10); // Checks if the ArrayList contains 10

Index-based Operations:

int index = myList.indexOf(10); // Returns the index of the first occurrence of 10
int lastIndex = myList.lastIndexOf(10); // Returns the index of the last occurrence of 10

Sublist Operations:

List<Integer> subList = myList.subList(1, 3); // Returns a sublist from index 1 (inclusive) to 3 (exclusive)

Iteration:

for (int i = 0; i < myList.size(); i++) {
    int element = myList.get(i);
}
// or
for (Integer element : myList) {
    // Do something with element
}

Conversion to Array:

Integer[] array = myList.toArray(new Integer[0]); // Converts ArrayList to array

Sorting:

Collections.sort(myList); // Sorts the ArrayList in natural order
Collections.sort(myList, Comparator.reverseOrder()); // Sorts the ArrayList in reverse order

Checking Equality:

ArrayList<Integer> otherList = new ArrayList<>(Arrays.asList(1, 2, 3));
boolean isEqual = myList.equals(otherList); // Checks if two ArrayLists are equal

Iteration with Iterator:

Iterator<Integer> iterator = myList.iterator();
while (iterator.hasNext()) {
    int element = iterator.next();
}


These are the main operations you can perform with an ArrayList in Java. It's a versatile data structure that provides dynamic resizing and a wide range of methods for manipulation and traversal.